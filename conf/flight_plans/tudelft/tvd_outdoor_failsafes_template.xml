<!DOCTYPE flight_plan SYSTEM "../flight_plan.dtd">

<!-- 
TEMPLATE OUTDOOR FLIGHT PLAN WITH SAFETY EXCEPTIONS

The template is set up for testing and verification inside the cyberzoo.
Modify accordingly for outdoor flight.

Implemented failsafes:
- Preflight checks (Battery level, GPS valid):
- Lateral geofence (YELLOW and RED):
    - The drone will enter HOME mode when crossing the YELLOW geofence.
    - The drone will KILL outside the RED geofence.
- Altitude limit (YELLOW and RED):
    - The drone will enter HOME mode above the YELLOW altitude limit.
    - The drone will KILL above the RED altitude limit.
- RC and link loss:
    - The drone will limit thrust to 50% hover (see CAT2-2.1 RPAS req's)
      and return HOME after 3 sec RC loss or 30 sec datalink loss.
- GPS loss:
    - The drone will enter FAILSAFE mode (default behavior)
- Low battery:
    - The drone will return HOME and land on BAT LOW.
    - The drone will land at its current location on BAT CRIT.

Modification checklist:
- Flight plan:
    - lat0, lon0
    - alt (AMSL) - default waypoint altitude. Max 50m AGL (CAT2-2.3).
    - ground_alt (AMSL)
    - max_dist_from_home. Max 100m from pilot (CAT2-2.3)
    - security_height. Minimal height above ground.
    - home_mode_height (optional). Set high enough to cross obstacles near HOME. 
- Safety defines (in header)
- Waypoints:
    - HOME in LTP or lat/lon
    - YELLOW and RED geofence
    - General: height vs. alt
- Blocks:
    - Starting and stopping of loggers
- Airframe:
    - Failsafe defines:
        - http://wiki.paparazziuav.org/wiki/Failsafe
        - RC_LOST_TIME, RC_REALLY_LOST_TIME
    - Modules:
        - geo_mag
        - file_logger

Verification:
- Link loss: remove props, high throttle, disconnect RC/link
- RED geofence and altitude limit: remove props, in-hand test (reduce limits first!)
- YELLOW geofence and altitude limit: flight test
- BAT Low: flight test

Changes:
- 2019-09-06: (TvD) First version
 -->

<flight_plan name="failsafe_template" lat0="51.990634" lon0="4.376789" alt="1.0" ground_alt="0.0" max_dist_from_home="100"  security_height="0.5">
  <header>
#include "autopilot.h"
#include "airframe.h"
#include "gps.h"
#include "modules.h"
#include "subsystems/datalink/datalink.h"
#include "subsystems/electrical.h"
#include "subsystems/radio_control.h"

// Safety defines
#define FP_HEIGHT_YELLOW 1.0
#define FP_ALT_YELLOW 9999.9
#define FP_HEIGHT_RED 2.0
#define FP_ALT_RED 9999.9
#define FP_RC_LOST_TIME 3.0
#define FP_LINK_LOST_TIME 30.0

// Other defines
#define FP_PREFLIGHT_VSUPPLY 11.8
  </header>
  <waypoints>
    <waypoint name="HOME" x="0.0" y="0.0" height="0.5"/>
    <waypoint name="CLIMB" x="1.2" y="-0.6" height="0.5"/>
    <waypoint name="STDBY" x="-0.7" y="-0.8" height="0.5"/>
    <waypoint name="TD" x="0.8" y="-1.7" height="0.5"/>
    <waypoint name="YELLOW1" lat="51.990630" lon="4.376823"/>
    <waypoint name="YELLOW2" lat="51.990614" lon="4.376779"/>
    <waypoint name="YELLOW3" lat="51.990636" lon="4.376759"/>
    <waypoint name="YELLOW4" lat="51.990651" lon="4.376805"/>
    <waypoint name="RED1" lat="51.9906113" lon="4.3768528"/>
    <waypoint name="RED2" lat="51.9905974" lon="4.3767866"/>
    <waypoint name="RED3" lat="51.9906309" lon="4.3767326"/>
    <waypoint name="RED4" lat="51.9906637" lon="4.3767974"/>
  </waypoints>
  <sectors>
    <sector color="yellow" name="YELLOW">
      <corner name="YELLOW1"/>
      <corner name="YELLOW2"/>
      <corner name="YELLOW3"/>
      <corner name="YELLOW4"/>
    </sector>
    <sector color="red" name="RED">
      <corner name="RED1"/>
      <corner name="RED2"/>
      <corner name="RED3"/>
      <corner name="RED4"/>
    </sector>
  </sectors>
  <exceptions>
    <!-- Lateral geofence -->
    <exception cond="!InsideYELLOW(GetPosX(), GetPosY()) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Geofence yellow'))" deroute="Geofence yellow"/>
    <exception cond="!InsideRED(GetPosX(), GetPosY()) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Geofence red'))" deroute="Geofence red"/>
    <!-- Altitude limit -->
    <exception cond="(MoreThan(stateGetPositionEnu_f()->z, FP_HEIGHT_YELLOW) @OR
        MoreThan(stateGetPositionLla_f()->alt, FP_ALT_YELLOW)) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Altitude yellow'))" deroute="Altitude yellow"/>
    <exception cond="(MoreThan(stateGetPositionEnu_f()->z, FP_HEIGHT_RED) @OR
        MoreThan(stateGetPositionLla_f()->alt, FP_ALT_RED)) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Altitude red'))" deroute="Altitude red"/>
    <!-- RC and link loss -->
    <exception cond="MoreThan(radio_control.time_since_last_frame, FP_RC_LOST_TIME) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('RC loss'))" deroute="RC loss"/>
    <exception cond="MoreThan(datalink_time, FP_LINK_LOST_TIME) @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Link loss'))" deroute="Link loss"/>
    <!-- GPS loss -->
    <exception cond="GpsIsLost() @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('GPS loss'))" deroute="GPS loss"/>
    <!-- Low battery -->
    <exception cond="electrical.bat_low @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Bat low'))" deroute="Bat low"/>
    <exception cond="electrical.bat_critical @AND
        MoreThan(nav_block, IndexOfBlock('Holding point')) @AND
        LessThan(nav_block, IndexOfBlock('Bat crit'))" deroute="Bat crit"/>
  </exceptions>
  <blocks>
    <block name="PREFLIGHT">
      <deroute block="Check battery level"/>
    </block>
    <block name="Check battery level">
      <call_once fun="NavKillThrottle()"/>
      <while cond="LessThan(electrical.vsupply, FP_PREFLIGHT_VSUPPLY)"/>
    </block>
    <block name="GPS init">
      <call_once fun="NavKillThrottle()"/>
      <while cond="!GpsFixValid()"/>
      <while cond="LessThan(NavBlockTime(), 20)"/>
      <!-- Force geo_mag update -->
      <call_once fun="geo_mag_periodic()"/>
      <call_once fun="geo_mag_event()"/>
    </block>
    <block name="Set height reference">
      <call_once fun="NavKillThrottle()"/>
      <call_once fun="NavSetAltitudeReferenceHere()"/><!-- Do NOT move ground reference horizontally as it will shift the geofence! -->
    </block>
    
    <block name="FLIGHT">
      <deroute block="Holding point"/>
    </block>
    <block name="Holding point">
      <exception cond="LessThan(electrical.vsupply, FP_PREFLIGHT_VSUPPLY)" deroute="Check battery level"/>
      <exception cond="!GpsFixValid()" deroute="GPS init"/>
      <call_once fun="NavKillThrottle()"/>
      <attitude pitch="0" roll="0" throttle="0" vmode="throttle" until="FALSE"/>
    </block>
    <block name="Start engine / manual flight">
      <call_once fun="logger_file_file_logger_periodic_status = MODULES_START"/>
      <call_once fun="NavResurrect()"/>
      <attitude pitch="0" roll="0" throttle="0" until="FALSE" vmode="throttle"/>
    </block>
    <block name="Takeoff">
      <exception cond="MoreThan(stateGetPositionEnu_f()->z, 0.3)" deroute="Standby"/>
      <call_once fun="NavSetWaypointHere(WP_CLIMB)"/>
      <stay climb="nav_climb_vspeed" vmode="climb" wp="CLIMB"/>
    </block>
    <block name="Standby" strip_button="Standby" strip_icon="home.png">
      <stay wp="STDBY"/>
    </block>
    <block name="Land here" strip_button="Land Here" strip_icon="land-right.png">
      <call_once fun="NavSetWaypointHere(WP_TD)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="TD" vmode="climb" climb="nav_descend_vspeed" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    
    <!-- Contingency plans in order of severity -->
    <block name="CONTINGENCY">
      <deroute block="Land here normal"/>
    </block>
    <block name="Bat low">
      <go wp="HOME"/>
      <deroute block="Land here normal"/>
    </block>
    <block name="Bat crit">
      <deroute block="Land here normal"/>
    </block>
    <block name="RC loss">
      <deroute block="Land here low thrust"/>
    </block>
    <block name="Link loss">
      <deroute block="Land here low thrust"/>
    </block>
    <block name="Altitude yellow">
      <go wp="HOME"/>
      <deroute block="Land here normal"/>
    </block>
    <block name="Geofence yellow">
      <go wp="HOME"/>
      <deroute block="Land here normal"/>
    </block>
    <block name="Land here normal">
      <call_once fun="autopilot_set_mode(AP_MODE_NAV)"/>
      <call_once fun="NavSetWaypointHere(WP_TD)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="TD" vmode="climb" climb="nav_descend_vspeed" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    <block name="Land here low thrust">
      <call_once fun="autopilot_set_mode(AP_MODE_NAV)"/>
      <call_once fun="NavSetWaypointHere(WP_TD)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="HOME" vmode="throttle" throttle="0.50 * GUIDANCE_V_NOMINAL_HOVER_THROTTLE" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    <block name="GPS loss">
      <call_once fun="autopilot_set_mode(AP_MODE_FAILSAFE)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="HOME" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    <block name="Altitude red">
      <call_once fun="NavKillThrottle()"/>
      <call_once fun="autopilot_set_mode(AP_MODE_KILL)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="HOME" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    <block name="Geofence red">
      <call_once fun="NavKillThrottle()"/>
      <call_once fun="autopilot_set_mode(AP_MODE_KILL)"/>
      <call_once fun="NavStartDetectGround()" />
      <stay wp="HOME" until="!nav_is_in_flight() || NavDetectGround()"/>
      <deroute block="LANDED"/>
    </block>
    
    <block name="LANDED">
      <call_once fun="NavKillThrottle()"/>
      <call_once fun="logger_file_file_logger_periodic_status = MODULES_STOP"/>
      <attitude pitch="0" roll="0" throttle="0" vmode="throttle" until="FALSE"/>
    </block>

  </blocks>
</flight_plan>
